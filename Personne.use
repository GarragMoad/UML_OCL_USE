model Personnes -- Description du modèle
enum Sexe {Homme, Femme} -- Description d’un type énuméré
class Personne -- Début de la class Personne
attributes -- Description des attributs
nom : String
age : Integer
sexe : Sexe
operations -- Description des opérations
anniversaire()
getConjoint() : Personne =
if not(femme.isUndefined())
then femme
else mari
endif
estMarie() : Boolean =
not(getConjoint().isUndefined())
end -- Fin de la class Personne
class Entreprise -- Début de la class Entreprise
attributes
nom : String
budget : Integer
salaireEmploye : Integer
operations
payerEmployes()
embaucher(p : Personne)
end -- Fin de la class Entreprise
class Compte -- Début de la class Compte
attributes
solde : Integer
operations
debiter(somme : Integer)
crediter(somme : Integer)
getSolde() : Integer
end -- Fin de la class Compte

association ParentsEnfants between
Personne[0..2] role parents
Personne[*] role enfants
end
association Mariage between
Personne[0..1] role mari
Personne[0..1] role femme
end
association CompteBancaire between
Personne[1] role proprietaire
Compte[0..1] role compte
end
association Emploi between
Personne[*] role employes
Entreprise[0..1] role employeur
end
association Paie between
Compte[*] role comptes
Entreprise[0..1] role employeur
end
-- Description des contraintes OCL
constraints
context Personne inv pasSonEnfant:
enfants -> excludes(self)
context Personne inv pasSonParent:
parents -> excludes(self)
context Personne inv ageMariage:
self.estMarie() implies self.age >= 18
context Personne::anniversaire()
post plusVieux: self.age = self.age@pre + 1